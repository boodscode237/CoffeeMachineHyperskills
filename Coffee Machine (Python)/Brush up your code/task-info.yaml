type: edu
files:
- name: machine/coffee_machine.py
  visible: true
  text: "# Write your code here\n# print(\"Starting to make a coffee\")\n# print(\"\
    Grinding coffee beans\")\n# print(\"Boiling water\")\n# print(\"Mixing boiled\
    \ water with crushed coffee beans\")\n# print(\"Pouring coffee into the cup\"\
    )\n# print(\"Pouring some milk into the cup\")\n# print(\"Coffee is ready!\")\n\
    # print(\"Write how many cups of coffee you will need:\")\n# num_of_cups = int(input())\n\
    # water_ = num_of_cups * 200\n# milk_ = num_of_cups * 50\n# beans_ = num_of_cups\
    \ * 15\n# print(\"For \" + str(num_of_cups) + \" cups of coffee you will need:\"\
    )\n# print(str(water_) + \" ml of water\")\n# print(str(milk_) + \" ml of milk\"\
    )\n# print(str(beans_) + \" g of coffee beans\")\n# print(\"Write how many ml\
    \ of water the coffee machine has:\")\n# water = int(input())\n# print(\"Write\
    \ how many ml of milk the coffee machine has:\")\n# milk = int(input())\n# print(\"\
    Write how many grams of coffee beans the coffee machine has\")\n# beans = int(input())\n\
    # print(\"Write how many cups of coffee you will need:\")\n# start_milk = 50\n\
    # start_water = 200\n# start_coffee_beans = 15\n#\n#\n# print(\"Write how many\
    \ ml of water the coffee machine has:\")\n# available_water = int(input())\n#\
    \ print(\"Write how many ml of milk the coffee machine has:\")\n# available_milk\
    \ = int(input())\n# print(\"Write how many grams of coffee beans the coffee machine\
    \ has:\")\n# available_coffee_beans = int(input())\n# print(\"Write how many cups\
    \ of coffee you will need:\")\n# cups = int(input())\n#\n# a = available_water\
    \ // start_water\n# b = available_milk // start_milk\n# c = available_coffee_beans\
    \ // start_coffee_beans\n#\n# projected_cups = [a, b, c]\n# n = min(projected_cups)\
    \ - cups\n#\n# if min(projected_cups) == cups:\n#     print(\"Yes, I can make\
    \ that amount of coffee\")\n# elif min(projected_cups) > cups:\n#     print(f\"\
    Yes, I can make that amount of coffee (and even {n} more than that)\")\n# elif\
    \ min(projected_cups) < cups:\n#     print(f\"No, I can make only {min(projected_cups)}\
    \ cups of coffee\")\nwater = 400\nmilk = 540\nbeans = 120\ncups = 9\nmoney = 550\n\
    \ndef remaining():\n    global water, milk, beans, cups, money\n    print(f\"\"\
    \"The coffee machine has: \\n{water} of water \\n{milk} of milk \\n{beans} of\
    \ coffee beans \\n{cups} of disposable cups \\n${money} of money\"\"\")\n    \n\
    \ndef buy():\n    global water, milk, beans, cups, money\n    coffee_type = input(\"\
    What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: \")\n    if\
    \ coffee_type == \"back\":\n        return\n    elif int(coffee_type) == 1:\n\
    \        if water < 250:\n            print(\"Sorry, not enough water!\")\n  \
    \      elif beans < 16:\n            print(\"Sorry, not enough coffee!\")\n  \
    \      elif cups < 1:\n            print(\"Sorry, not enough disposable cups!\"\
    )\n        else:\n            water = water - 250\n            beans = beans -\
    \ 16\n            cups = cups - 1\n            money = money + 4\n           \
    \ print(\"I have enough resources, making you a coffee!\")\n\n    elif int(coffee_type)\
    \ == 2:\n        if water < 350:\n            print(\"Sorry, not enough water!\"\
    )\n        elif milk < 75:\n            print(\"Sorry, not enough milk!\")\n \
    \       elif cups < 1:\n            print(\"Sorry, not enough disposable cups!\"\
    )\n        elif beans < 20:\n            print(\"Sorry, not enough disposable\
    \ coffee!\")\n        else:\n            water = water - 350\n            beans\
    \ = beans - 20\n            milk = milk - 75\n            cups = cups - 1\n  \
    \          money = money + 7\n            print(\"I have enough resources, making\
    \ you a coffee!\")\n\n\n    elif int(coffee_type) == 3:\n        if water < 200:\n\
    \            print(\"Sorry, not enough water!\")\n        elif milk < 100:\n \
    \           print(\"Sorry, not enough milk!\")\n        elif cups < 1:\n     \
    \       print(\"Sorry, not enough disposable cups!\")\n        elif beans < 12:\n\
    \            print(\"Sorry, not enough disposable coffee!\")\n        else:\n\
    \            water = water - 200\n            beans = beans - 12\n           \
    \ milk = milk - 100\n            cups = cups - 1\n            money = money +\
    \ 6\n            print(\"I have enough resources, making you a coffee!\")\n  \
    \          \n        \n\ndef fill():\n    global water, milk, beans, cups, money\n\
    \    water_refill = int(input(\"Write how many ml of water do you want to add:\
    \ \"))\n    milk_refill = int(input(\"Write how many ml of milk do you want to\
    \ add: \"))\n    beans_refill = int(input(\"Write how many grams of beans do you\
    \ want to add: \"))\n    cups_refill = int(input(\"Write how many disposable cups\
    \ do you want to add: \"))\n    if water_refill > 0:\n        water = water +\
    \ water_refill\n    if milk_refill > 0:\n        milk = milk + milk_refill\n \
    \   if beans_refill > 0:\n        beans = beans + beans_refill\n    if cups_refill\
    \ > 0:\n        cups = cups + cups_refill\n\n\ndef take():\n    global water,\
    \ milk, beans, cups, money\n    money_taken = money\n    print(f\"I gave you ${money_taken}\"\
    )\n    money = 0\n\ndef exit():\n    exit()\n\n\n\nwhile True:\n    print(\"Write\
    \ action (buy, fill, take, remaining, exit):\")\n    action = input()\n    if\
    \ action == \"buy\":\n        buy()\n    elif action == \"fill\":\n        fill()\n\
    \    elif action == \"take\":\n        take()\n    elif action == \"remaining\"\
    :\n        remaining()\n    elif action == \"exit\":\n        break\n\n\n\n\n\n\
    \n"
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import CoffeeMachineTest

    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/371/implement#comment
status: Failed
feedback:
  message: Syntax Error
  time: "Tue, 30 May 2023 15:20:42 UTC"
record: -1
